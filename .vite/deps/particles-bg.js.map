{
  "version": 3,
  "sources": ["../../node_modules/raf-manager/src/RAFManager.js", "../../node_modules/proton-engine/src/math/MathUtil.js", "../../node_modules/proton-engine/src/math/Span.js", "../../node_modules/proton-engine/src/utils/WebGLUtil.js", "../../node_modules/proton-engine/src/utils/DomUtil.js", "../../node_modules/proton-engine/src/utils/ImgUtil.js", "../../node_modules/proton-engine/src/utils/Util.js", "../../node_modules/proton-engine/src/utils/Puid.js", "../../node_modules/proton-engine/src/core/Pool.js", "../../node_modules/proton-engine/src/debug/Stats.js", "../../node_modules/proton-engine/src/events/EventDispatcher.js", "../../node_modules/proton-engine/src/math/Integration.js", "../../node_modules/proton-engine/src/core/Proton.js", "../../node_modules/proton-engine/src/utils/Rgb.js", "../../node_modules/proton-engine/src/math/ease.js", "../../node_modules/proton-engine/src/math/Vector2D.js", "../../node_modules/proton-engine/src/core/Particle.js", "../../node_modules/proton-engine/src/utils/ColorUtil.js", "../../node_modules/proton-engine/src/math/Polar2D.js", "../../node_modules/proton-engine/src/math/Mat3.js", "../../node_modules/proton-engine/src/math/ArraySpan.js", "../../node_modules/proton-engine/src/math/Rectangle.js", "../../node_modules/proton-engine/src/initialize/Rate.js", "../../node_modules/proton-engine/src/initialize/Initialize.js", "../../node_modules/proton-engine/src/initialize/Life.js", "../../node_modules/proton-engine/src/zone/Zone.js", "../../node_modules/proton-engine/src/zone/PointZone.js", "../../node_modules/proton-engine/src/initialize/Position.js", "../../node_modules/proton-engine/src/initialize/Velocity.js", "../../node_modules/proton-engine/src/initialize/Mass.js", "../../node_modules/proton-engine/src/initialize/Radius.js", "../../node_modules/proton-engine/src/initialize/Body.js", "../../node_modules/proton-engine/src/behaviour/Behaviour.js", "../../node_modules/proton-engine/src/behaviour/Force.js", "../../node_modules/proton-engine/src/behaviour/Attraction.js", "../../node_modules/proton-engine/src/behaviour/RandomDrift.js", "../../node_modules/proton-engine/src/behaviour/Gravity.js", "../../node_modules/proton-engine/src/behaviour/Collision.js", "../../node_modules/proton-engine/src/behaviour/CrossZone.js", "../../node_modules/proton-engine/src/behaviour/Alpha.js", "../../node_modules/proton-engine/src/behaviour/Scale.js", "../../node_modules/proton-engine/src/behaviour/Rotate.js", "../../node_modules/proton-engine/src/behaviour/Color.js", "../../node_modules/proton-engine/src/behaviour/Cyclone.js", "../../node_modules/proton-engine/src/behaviour/Repulsion.js", "../../node_modules/proton-engine/src/behaviour/GravityWell.js", "../../node_modules/proton-engine/src/initialize/InitializeUtil.js", "../../node_modules/proton-engine/src/emitter/Emitter.js", "../../node_modules/proton-engine/src/emitter/BehaviourEmitter.js", "../../node_modules/proton-engine/src/emitter/FollowEmitter.js", "../../node_modules/proton-engine/src/render/BaseRenderer.js", "../../node_modules/proton-engine/src/render/CanvasRenderer.js", "../../node_modules/proton-engine/src/render/DomRenderer.js", "../../node_modules/proton-engine/src/render/EaselRenderer.js", "../../node_modules/proton-engine/src/render/PixelRenderer.js", "../../node_modules/proton-engine/src/render/PixiRenderer.js", "../../node_modules/proton-engine/src/utils/MStack.js", "../../node_modules/proton-engine/src/render/WebGLRenderer.js", "../../node_modules/proton-engine/src/render/CustomRenderer.js", "../../node_modules/proton-engine/src/zone/LineZone.js", "../../node_modules/proton-engine/src/zone/CircleZone.js", "../../node_modules/proton-engine/src/zone/RectZone.js", "../../node_modules/proton-engine/src/zone/ImageZone.js", "../../node_modules/proton-engine/src/debug/Debug.js", "../../node_modules/proton-engine/src/index.js", "../../node_modules/particles-bg/src/utils/Rand.js", "../../node_modules/particles-bg/src/particles/Canvas.jsx", "../../node_modules/particles-bg/src/utils/Color.js", "../../node_modules/particles-bg/src/particles/Ball.jsx", "../../node_modules/particles-bg/src/particles/Color.jsx", "../../node_modules/particles-bg/src/particles/Custom.jsx", "../../node_modules/particles-bg/src/particles/Lines.jsx", "../../node_modules/particles-bg/src/particles/Thick.jsx", "../../node_modules/particles-bg/src/particles/Square.jsx", "../../node_modules/particles-bg/src/particles/Cobweb.jsx", "../../node_modules/particles-bg/src/particles/Circle.jsx", "../../node_modules/particles-bg/src/particles/Tadpole.jsx", "../../node_modules/particles-bg/src/particles/Polygon.jsx", "../../node_modules/particles-bg/src/particles/Fountain.jsx", "../../node_modules/particles-bg/src/index.js"],
  "sourcesContent": ["/**\n *  RAFManager requestAnimationFrame Manager\n * \n *  Simple package\n * \n *  CODE:\n * \n * \t\t// Add to\n *  \t-- RAFManager.add(func);\n * \n *   \t// Add and carry parameters\n *  \t-- const func = data =>{ console.log(data) };\n *  \t-- RAFManager.add(func, 25, { msg:'hello world!' }); \n * \t\t\n * \t\t// remove\n *  \t-- RAFManager.remove(func);\n *  \t-- RAFManager.stop();\t\n*/\n\n// simple polyfill by https://gist.github.com/paulirish/1579671\n(function () {\n\tlet lastTime = 0;\n\tlet vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\n\t\t\t|| window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n}());\n\nconst RAFManager = {\n\ttimer: 0,\n\tstate: 'stop',\n\tanimations: [],\n\n\tadd(callback, fps = 60, param = null) {\n\t\tconst n = 60 / fps;\n\t\tconst aniData = { callback, fps, n, param, i: 0 };\n\t\tthis.animations.push(aniData);\n\t\tif (this.animations.length >= 1) this.start();\n\n\t\treturn this;\n\t},\n\n\tgetIndex(callback) {\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tif (aniData.callback === callback) return i;\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tremove(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tif (index < 0) return;\n\n\t\tthis.deleteMap(callback);\n\t\tif (this.animations.length === 0) this.stop();\n\n\t\treturn this;\n\t},\n\n\tdeleteMap(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tconst aniData = this.animations[index];\n\t\tfor (let key in aniData) delete aniData[key];\n\n\t\tthis.animations.splice(index, 1);\n\t},\n\n\tstart() {\n\t\tif (this.state === 'start') return;\n\n\t\tthis.state = 'start';\n\t\tthis.tick();\n\t\treturn this;\n\t},\n\n\tstop() {\n\t\tif (this.state === 'stop') return;\n\n\t\tthis.state = 'stop';\n\t\tcancelAnimationFrame(this.timer);\n\t\treturn this;\n\t},\n\n\ttick() {\n\t\tthis.timer = requestAnimationFrame(() => { this.tick(); });\n\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tconst callback = aniData.callback;\n\t\t\tconst param = aniData.param;\n\n\t\t\taniData.i++;\n\t\t\tif (aniData.i >= aniData.n) {\n\t\t\t\tcallback(param);\n\t\t\t\taniData.i = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default RAFManager;", "const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n", "import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n", "export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n", "export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n", "import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n", "import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n", "const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n", "/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n", "export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n", "/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n", "export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n", "import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n", "export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n", "import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n", "import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n", "/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n", "export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n", "import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n", "const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n", "import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n", "export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n", "import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n", "export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n", "import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n", "import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n", "import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n", "import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n", "import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n", "import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n", "import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n", "import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n", "import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n", "import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}", "import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n", "import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n", "import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}", "import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}", "import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n", "import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}", "import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n", "import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n", "import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n", "import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n", "import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}", "import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n", "import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n", "import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n", "import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n", "import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n", "import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n", "import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n", "import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n", "import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n", "import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n", "import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n", "import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}", "import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n", "import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n", "import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n", "import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n", "import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n", "import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n", "import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n", "// Code source from here, thanks author\n// https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\nclass Rand {\n\n  constructor() {\n      this.list = [];\n  }\n\n  set(probability, target) {\n      this.list.push({\n          probability,\n          target,\n          a: 0,\n          b: 1\n      });\n\n      this.calculation();\n  }\n\n  calculation() {\n      let total = 0;\n      for (let i = 0; i < this.list.length; i++) {\n          total += this.list[i].probability;\n      }\n\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n          const val = obj.probability / total;\n\n          obj.a = i === 0 ? 0 : this.list[i - 1].b;\n          obj.b = obj.a + val;\n      }\n  }\n\n  getResult() {\n      const val = Math.random();\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n\n          if (val <= obj.b && val > obj.a) {\n              return obj.target;\n          }\n      }\n\n      return this.list[0].target;\n  }\n};\n\nexport default Rand;\n", "import React from \"react\";\nimport RAFManager from \"raf-manager\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._iid = 0;\n    this._oid = 0;\n    this.size = { width: 0, height: 0 };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._oid = setTimeout(() => {\n      this.initCanvas();\n      this.resize = this.resize.bind(this);\n      window.addEventListener(\"resize\", this.resize);\n    }, 100);\n\n    const canvas = this.getCanvas();\n    this.props.onCanvasDidMount && this.props.onCanvasDidMount(canvas);\n  }\n\n  initCanvas() {\n    const canvas = this.getCanvas();\n\n    if (this.props.globalCompositeOperation) {\n      const context = canvas.getContext(\"2d\");\n      context.globalCompositeOperation = this.props.globalCompositeOperation;\n    }\n\n    const { width, height } = this.setCanvasSize(canvas);\n    this.heartbeatDetectionCanvasSize(canvas);\n    this.props.onCanvasInited(canvas, width, height);\n  }\n\n  getCanvas(){\n    const canvas = this.canvasRef.current;\n    return canvas;\n  }\n\n  heartbeatDetectionCanvasSize(canvas) {\n    this._iid = setInterval(() => {\n      if(this.canvasRef.current){\n        const newHeight = this.canvasRef.current.clientHeight;\n        if (newHeight !== this.size.height) {\n          const { width, height } = this.setCanvasSize(canvas);\n          this.props.onResize && this.props.onResize(width, height);\n        }\n      }\n    }, 1000 / 10);\n  }\n\n  componentWillUnmount() {\n    try{\n      window.removeEventListener(\"resize\", this.resize);\n      clearInterval(this._iid);\n      clearTimeout(this._oid);\n    }catch(e){\n    }\n  }\n\n  resize() {\n    const canvas = this.getCanvas();\n    const { width, height } = this.setCanvasSize(canvas);\n    this.props.onResize && this.props.onResize(width, height);\n  }\n\n  setCanvasSize(canvas) {\n    const width = this.canvasRef.current.clientWidth;\n    const height = this.canvasRef.current.clientHeight;\n\n    this.size.width = width;\n    this.size.height = height;\n    canvas.width = width;\n    canvas.height = height;\n    return { width, height };\n  }\n\n  handleWaypointEnter() {\n    RAFManager.start();\n  }\n\n  handleWaypointLeave() {\n    RAFManager.stop();\n  }\n\n  getStyle() {\n    const { bg } = this.props;\n    let style = { width: \"100%\", height: \"100%\" };\n\n    if (bg === true) {\n      style = Object.assign(style, {\n        position: \"absolute\",\n        zIndex: -1,\n        top: 0,\n        left: 0\n      });\n    } else if(bg && typeof bg === \"object\") {\n      style = Object.assign(style, bg);\n    }\n\n    return style;\n  }\n\n  handleMouseDown(e) {\n    this.props.onMouseDown && this.props.onMouseDown(e);\n  }\n\n  render() {\n    return (\n      <canvas className=\"particles-bg-canvas-self\"\n        ref={this.canvasRef}\n        onMouseDown={this.handleMouseDown.bind(this)}\n        style={this.getStyle()}\n      />\n    );\n  }\n}\n", "\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : {};\n}\n\nfunction getColor(color, a) {\n    let c;\n    if (color) {\n        c = hexToRgb(color);\n        return `rgba(${c.r},${c.g},${c.b}, ${a})`;\n    } else {\n        return null;\n    }\n}\n\n\nexport { hexToRgb, getColor };", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Ball extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.createMiniEmitter(canvas);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onResize() { }\n\n  createProton(canvas, width, height) {\n    const context = canvas.getContext(\"2d\");\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n      new Proton.Span(0.8, 1.3)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 50));\n    emitter.addInitialize(new Proton.Life(5, 6));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(5, 8),\n        new Proton.Span(30, 70),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(\n      new Proton.Color([\"#36aaf3\", \"#fd769c\", \"#94ff22\", \"#ffa545\", \"#ffffff\"])\n    );\n    emitter.addBehaviour(new Proton.Scale(0.7, 1));\n    emitter.addBehaviour(new Proton.Gravity(3));\n    emitter.addBehaviour(new Proton.Collision(emitter));\n    emitter.addBehaviour(this.customDeadBehaviour(canvas));\n    emitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n\n    emitter.p.x = Math.min(500, Math.max(canvas.width / 2 - 400, 50));\n    emitter.p.y = canvas.height / 2 + 50;\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate =  ()=> {\n      context.fillStyle = getColor(this.props.color, 0.2) || \"rgba(255, 255, 255, 0.2)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n    this.proton.addRenderer(renderer);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: function (particle) { },\n      applyBehaviour: particle => {\n        if (particle.p.y + particle.radius >= canvas.height) {\n          if (particle.radius > 9) {\n            this.miniEmitteing(particle);\n            particle.dead = true;\n          }\n        }\n      }\n    };\n  }\n\n  createMiniEmitter(canvas) {\n    const miniEmitter = new Proton.Emitter();\n    miniEmitter.rate = new Proton.Rate(\n      new Proton.Span(3, 6),\n      new Proton.Span(1, 2)\n    );\n\n    miniEmitter.addInitialize(new Proton.Mass(1));\n    miniEmitter.radiusInitialize = new Proton.Radius();\n    miniEmitter.addInitialize(miniEmitter.radiusInitialize);\n    miniEmitter.addInitialize(new Proton.Life(0.5, 1));\n    miniEmitter.addInitialize(\n      new Proton.V(\n        new Proton.Span(1.5, 3),\n        new Proton.Span(0, 70, true),\n        \"polar\"\n      )\n    );\n\n    miniEmitter.colorBehaviour = new Proton.Color(\"#ffffff\");\n    miniEmitter.addBehaviour(new Proton.Alpha(1, 0));\n    miniEmitter.addBehaviour(miniEmitter.colorBehaviour);\n    miniEmitter.addBehaviour(new Proton.Gravity(4));\n    miniEmitter.addBehaviour(new Proton.Collision(miniEmitter));\n    miniEmitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n    this.proton.addEmitter(miniEmitter);\n\n    this.miniEmitter = miniEmitter;\n  }\n\n  miniEmitteing(particle) {\n    const miniEmitter = this.miniEmitter;\n    miniEmitter.radiusInitialize.reset(\n      particle.radius * 0.05,\n      particle.radius * 0.2\n    );\n    miniEmitter.colorBehaviour.reset(particle.color);\n    miniEmitter.p.x = particle.p.x;\n    miniEmitter.p.y = particle.p.y;\n    miniEmitter.emit(\"once\");\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(5, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(0, 1, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.colors = [\n            \"#529B88\",\n            \"#CDD180\",\n            \"#FFFA32\",\n            \"#FB6255\",\n            \"#FB4A53\",\n            \"#FF4E50\",\n            \"#F9D423\"\n        ];\n        this.renderProton = this.renderProton.bind(this);\n    }\n\n    componentWillUnmount() {\n        try {\n            RAFManager.remove(this.renderProton);\n            this.proton.destroy();\n        } catch (e) { }\n    }\n\n    onCanvasInited(canvas, width, height) {\n        this.createProton(canvas, width, height);\n        RAFManager.add(this.renderProton);\n    }\n\n    onResize(width, height) {\n        this.crossZoneBehaviour.zone.width = width;\n        this.crossZoneBehaviour.zone.height = height;\n        this.proton.renderers[0].resize(width, height);;\n    }\n\n    getProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (Array.isArray(val)) {\n            return new Proton.Span(val[0], val[1]);\n        } else {\n            return val;\n        }\n    }\n\n    getArrProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (!val) return null;\n\n        if (Array.isArray(val)) {\n            return val;\n        } else {\n            return [val, val];\n        }\n    }\n\n    createProton(canvas, width, height) {\n        const num = this.getProp(\"num\", [5, 8]);\n        const rps = this.getProp(\"rps\", [0.1, 0.2]);\n        const mass = this.getProp(\"mass\", 1);\n        const radius = this.getProp(\"radius\", [10, 30]);\n        const life = this.getProp(\"life\", [2, 3]);\n        const body = this.getProp(\"body\");\n        const position = this.getProp(\"position\");\n        const v = this.getProp(\"v\", [2, 3]);\n        const tha = this.getProp(\"tha\", [-15, 15]);\n        const alpha = this.getArrProp(\"alpha\");\n        const scale = this.getArrProp(\"scale\");\n        const color = this.getArrProp(\"color\");\n        const cross = this.getProp(\"cross\", \"dead\");\n        const random = this.getProp(\"random\");\n        const rotate = this.getArrProp(\"rotate\");\n        const g = this.getProp(\"g\");\n        const f = this.getArrProp(\"f\");\n        const emitterV = this.getProp(\"emitter\");\n\n        this.proton = new Proton();\n        let emitter;\n        if (emitterV === \"follow\") {\n            emitter = new Proton.FollowEmitter();\n        } else {\n            emitter = new Proton.Emitter();\n        }\n        emitter.rate = new Proton.Rate(num, rps);\n\n        emitter.addInitialize(new Proton.Mass(mass));\n        emitter.addInitialize(new Proton.Radius(radius));\n        emitter.addInitialize(new Proton.Life(life));\n        emitter.addInitialize(new Proton.Velocity(v, tha, \"polar\"));\n        if (body) emitter.addInitialize(new Proton.Body(body));\n\n        let pos;\n        if (position === \"all\" || position === \"screen\") {\n            pos = new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height))\n        } else if (typeof position === \"object\") {\n            pos = new Proton.Position(new Proton.RectZone(position.x, position.y, position.width, position.height))\n        } else {\n            emitter.p.x = canvas.width / 2;\n            emitter.p.y = canvas.height / 2;\n        }\n\n        emitter.addInitialize(pos);\n\n        /// behaviour\n        const alphaB = alpha ? new Proton.Alpha(alpha[0], alpha[1]) : new Proton.Alpha(0, 1);\n        const scaleB = scale ? new Proton.Scale(scale[0], scale[1]) : new Proton.Scale(1, 0.2);\n        const colorB = color ? new Proton.Color(color[0], color[1]) : new Proton.Color(this.colors);\n\n        emitter.addBehaviour(alphaB);\n        emitter.addBehaviour(scaleB);\n        if(!body) emitter.addBehaviour(colorB);\n\n        if(rotate){\n            if(rotate[0]===true||rotate[0]===\"rotate\"){\n                emitter.addBehaviour(new Proton.Rotate());\n            }else{\n                emitter.addBehaviour(new Proton.Rotate(rotate[0], rotate[1]));\n            }\n        }\n\n        const zone = new Proton.RectZone(0, 0, canvas.width, canvas.height)\n        const crossZoneBehaviour = new Proton.CrossZone(zone, cross);\n        emitter.addBehaviour(crossZoneBehaviour);\n\n        random && emitter.addBehaviour(new Proton.RandomDrift(random, random, 0.05));\n        g && emitter.addBehaviour(new Proton.G(g));\n        f && emitter.addBehaviour(new Proton.F(f[0], f[1]));\n\n        emitter.emit();\n        this.proton.addEmitter(emitter);\n\n        const renderer = this.createRenderer(canvas);\n        this.proton.addRenderer(renderer);\n\n        this.emitter = emitter;\n        this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n\n    createRenderer(canvas) {\n        const width = canvas.width;\n        const height = canvas.height;\n        const context = canvas.getContext(\"2d\");\n        const renderer = new Proton.CanvasRenderer(canvas);\n\n        const onUpdate = this.getProp(\"onUpdate\");\n        if (onUpdate) {\n            renderer.onProtonUpdate = () => {\n                onUpdate(context, width, height);\n            };\n        }\n\n        const onParticleCreated = this.getProp(\"onParticleCreated\");\n        if (onParticleCreated) {\n            renderer.onParticleCreated = (particle) => {\n                onParticleCreated(context, particle);\n            };\n        }\n\n        const onParticleUpdate = this.getProp(\"onParticleUpdate\");\n        if (onParticleUpdate) {\n            renderer.onParticleUpdate = (particle) => {\n                onParticleUpdate(context, particle);\n            };\n        }\n\n        return renderer;\n    }\n\n    renderProton() {\n        this.proton && this.proton.update();\n    }\n\n    handleMouseDown(e) {\n        const onMouseDown = this.getProp(\"onMouseDown\");\n        if (onMouseDown) {\n            onMouseDown(e);\n        }\n    }\n\n    render() {\n        const globalCompositeOperation = this.props.globalCompositeOperation || this.props.operation || \"source-over\";\n\n        return (\n            <Canvas\n                bg={this.props.bg}\n                onMouseDown={this.handleMouseDown.bind(this)}\n                globalCompositeOperation={globalCompositeOperation}\n                onCanvasInited={this.onCanvasInited.bind(this)}\n                onResize={this.onResize.bind(this)}\n            />\n        );\n    }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Lines extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 250);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    const mouseObj = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.05));\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate = () => {\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n      context.lineWidth = 1;\n      context.moveTo(particle.old.p.x, particle.old.p.y);\n      context.lineTo(particle.p.x, particle.p.y);\n      context.closePath();\n      context.stroke();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Thick extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hue = 0;\n    this.index = 0;\n    this.colorTemplate = `hsla(hue,80%,50%, 0.75)`;\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.canvas = canvas;\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 150);\n\n    // Initialize\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(8));\n    emitter.addInitialize(\n      new Proton.V(new Proton.Span(0.1, 0.5), new Proton.Span(0, 360), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100)\n      )\n    );\n\n    // Behaviour\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    this.repulsion = new Proton.Repulsion(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2 - 100\n      },\n      3,\n      300\n    );\n\n    this.attraction = new Proton.Attraction(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      },\n      3,\n      200\n    );\n    emitter.addBehaviour(this.attraction, this.repulsion);\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = () => {\n      this.hue += 1;\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n      particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const hue = particle.data.begin + this.hue;\n      particle.color = this.colorTemplate.replace(\"hue\", hue % 360);\n\n      const ratio = 3 / 4;\n      const radius =\n        particle.radius * (1 - ratio) * Math.cos((particle.data.tha += 0.01)) +\n        particle.radius * ratio;\n\n      context.beginPath();\n      context.fillStyle = particle.color;\n      context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    };\n\n    return renderer;\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  renderProton() {\n    const canvas = this.canvas;\n    this.proton.update();\n    if (this.index % 200 === 0) {\n      this.attraction.targetPosition.x = Math.random() * canvas.width;\n      this.attraction.targetPosition.y = Math.random() * canvas.height;\n\n      this.repulsion.targetPosition.x = Math.random() * canvas.width;\n      this.repulsion.targetPosition.y = Math.random() * canvas.height;\n    }\n\n    this.index++;\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#fad390\",\n      \"#81ecec\",\n      \"#ffffff\",\n      \"#badc58\",\n      \"#f9ca24\",\n      \"#FEA47F\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasDidMount(canvas) {\n    \n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    const dis = 150;\n    this.crossZoneBehaviour.zone.width = width + 2 * dis;\n    this.crossZoneBehaviour.zone.height = height + 2 * dis;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.damping = 0;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4, 70));\n    emitter.addInitialize(\n      new Proton.Velocity(new Proton.Span(2, 10), new Proton.Span(0), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.LineZone(0, canvas.height, canvas.width, canvas.height)\n      )\n    );\n\n    const dis = 150;\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(\n        0 - dis,\n        0 - dis,\n        canvas.width + 2 * dis,\n        canvas.height + 2 * dis\n      ),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.colors));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n    emitter.preEmit(2);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      const w = particle.radius || 60;\n      const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n      particle.data.w = w;\n      particle.data.h = h;\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const w = particle.data.w;\n      const h = particle.data.h;\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"lighter\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Cobweb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(100),\n      new Proton.Span(0.05, 0.2)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 4));\n    emitter.addInitialize(new Proton.Life(Infinity));\n\n    const pointZone = new Proton.Position(\n      new Proton.RectZone(0, 0, width, height)\n    );\n    emitter.addInitialize(pointZone);\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.3, 0.6),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.2, 0.9)));\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#333\"));\n    this.crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, width, height),\n      \"cross\"\n    );\n    emitter.addBehaviour(this.crossZoneBehaviour);\n\n    emitter.emit(\"once\");\n    emitter.damping = 0;\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas, emitter));\n  }\n\n  createRenderer(canvas, emitter) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    const R = 140;\n\n    renderer.onProtonUpdateAfter = ()=> {\n      let particles = emitter.particles;\n\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          let pA = particles[i];\n          let pB = particles[j];\n          let dis = pA.p.distanceTo(pB.p);\n\n          if (dis < R) {\n            let alpha = (1 - dis / R) * 0.5;\n            context.strokeStyle = getColor(this.props.color, alpha) || `rgba(3, 3, 3, ${alpha})`;\n            context.beginPath();\n            context.moveTo(pA.p.x, pA.p.y);\n            context.lineTo(pB.p.x, pB.p.y);\n            context.closePath();\n            context.stroke();\n          }\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Circle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#74b9ff\",\n      \"#e84393\",\n      \"#6c5ce7\",\n      \"#00b894\",\n      \"#fdcb6e\",\n      \"#006266\",\n      \"#1B1464\"\n    ];\n\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num || 20);\n    emitter.damping = 0.008;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(30, 600));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height)\n      )\n    );\n\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.35, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.getColor()));\n    emitter.addBehaviour(new Proton.RandomDrift(50, 50, 0.5));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  getColor() {\n    let c = this.colors;\n    if (this.props.color) {\n      if(Array.isArray(this.props.color)){\n        c = this.props.color;\n      }else{\n        c = [this.props.color];\n      }\n    }\n\n    return c;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darken\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Tadpole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas) {\n\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.renderProton();\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(5, 9));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    const mouseInfo = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"bound\"\n    );\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#bbb\"));\n    //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const jointCount = 10;\n    const delayTime = 8;\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = function () {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.points = [];\n      particle.data.index = 0;\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      drawTadpoleTail(particle);\n      if (particle.data.index % delayTime === 0) fillPointsData(particle);\n      drawTadpoleHead(particle);\n      particle.data.index++;\n    };\n\n    const fillPointsData = particle => {\n      particle.data.points.unshift(particle.p.y);\n      particle.data.points.unshift(particle.p.x);\n\n      if (particle.data.points.length > jointCount) {\n        particle.data.points.pop();\n        particle.data.points.pop();\n      }\n    };\n\n    const drawTadpoleHead = particle => {\n      context.fillStyle = particle.color;\n      context.beginPath();\n      context.arc(\n        particle.p.x,\n        particle.p.y,\n        particle.radius,\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    };\n\n    const drawTadpoleTail = particle => {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n\n      context.moveTo(particle.p.x, particle.p.y);\n\n      const l = particle.data.points.length;\n      for (let i = 0; i < l; i += 2) {\n        const x = particle.data.points[i];\n        const y = particle.data.points[i + 1];\n\n        context.lineWidth = linearEvaluation(i, l);\n        context.lineTo(x, y);\n        context.stroke();\n      }\n    };\n\n    const linearEvaluation = (i, l) => {\n      if (l <= 2) return 1;\n\n      const max = 6;\n      const A = (max - 1) / (2 / l - 1);\n      const B = 1 - A;\n      const X = (i + 2) / l;\n      let val = A * X + B;\n      val = val >> 0;\n\n      return val;\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    RAFManager.add(() => {\n      this.proton.update();\n      //this.proton.stats.update();\n    });\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default class Polygon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas);\n    this.createEmitter({\n      canvas,\n      x: width / 2,\n      y: height / 2,\n      mainEmitter: true,\n      zone: \"bound\"\n    });\n\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize() {}\n\n  createProton(canvas) {\n    this.proton = new Proton();\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      drawPolygon(particle, particle.data.count);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    renderer.onParticleDead = particle => {};\n\n    const drawPolygon = (particle, count) => {\n      if (count >= 7) {\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n      } else {\n        const radius = particle.radius;\n\n        for (let i = 0; i <= count; i++) {\n          let x =\n            particle.p.x +\n            radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n          let y =\n            particle.p.y +\n            radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n          if (i === 0) context.moveTo(x, y);\n          else context.lineTo(x, y);\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  createEmitter({\n    mainEmitter,\n    canvas,\n    x,\n    y,\n    radius,\n    color = COLOR,\n    zone = \"dead\",\n    once = \"all\",\n    alpha = 0.85,\n    gravity = 3.5\n  }) {\n    const emitter = this.proton.pool.get(Proton.Emitter);\n\n    if (!emitter.completed) {\n      emitter.rate = new Proton.Rate(\n        this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n        new Proton.Span(1.6, 2.2)\n      );\n\n      const radiusInit = mainEmitter\n        ? new Proton.Radius(10, 110)\n        : new Proton.Radius(3, radius);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(radiusInit);\n      emitter.addInitialize(new Proton.Life(3, 6));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(4, 6),\n          new Proton.Span(-90, 90),\n          \"polar\"\n        )\n      );\n\n      emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n      emitter.addBehaviour(new Proton.Color(color));\n      emitter.addBehaviour(new Proton.Scale(1, 0.3));\n      emitter.addBehaviour(new Proton.Rotate());\n      emitter.addBehaviour(new Proton.Gravity(gravity));\n\n      emitter.addBehaviour(this.customDeadBehaviour(canvas));\n      emitter.addBehaviour(\n        new Proton.CrossZone(\n          new Proton.RectZone(0, 0, canvas.width, canvas.height),\n          zone\n        )\n      );\n    }\n\n    emitter.p.x = x;\n    emitter.p.y = y;\n    if (once === \"once\") emitter.emit(\"once\");\n    else emitter.emit();\n\n    this.proton.addEmitter(emitter);\n    //this.expireEmitter(emitter);\n  }\n\n  expireEmitter(emitter) {\n    setTimeout(() => {\n      emitter.completed = true;\n      this.proton.pool.expire(emitter);\n      this.proton.removeEmitter(emitter);\n    }, 500);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: particle => {\n        particle.data = particle.data || {};\n        particle.data.oldRadius = particle.radius;\n        particle.data.emitterCount = 0;\n      },\n      applyBehaviour: particle => {\n        if (particle.radius < 5) return;\n        if (particle.data.emitterCount >= 2) return;\n\n        if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n          particle.data.emitterCount++;\n          this.createEmitter({\n            canvas,\n            x: particle.p.x,\n            y: particle.p.y,\n            radius: particle.radius * (1 / 2),\n            alpha: 0.5,\n            gravity: 5,\n            color: particle.color,\n            once: \"once\"\n          });\n        }\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Fountain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(4, 7),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.CircleZone(width / 2, height / 2, 100))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(new Proton.Scale(0.2, 1));\n    emitter.addBehaviour(this.createCustomBehaviour());\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createCustomBehaviour() {\n    const f = 10 * 100;\n    return {\n      initialize: function(particle) {\n        particle.f = new Proton.Vector2D(0, 0);\n      },\n      applyBehaviour: particle => {\n        let length = particle.v.length() / 1000;\n        let gradient = particle.v.getGradient();\n        gradient += 3.14 / 2;\n\n        particle.f.x = f * length * Math.cos(gradient);\n        particle.f.y = f * length * Math.sin(gradient);\n        particle.a.add(particle.f);\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"xor\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n", "import React, { Component } from \"react\";\nimport Rand from \"./utils/Rand.js\";\nimport Ball from \"./particles/Ball.jsx\";\nimport Color from \"./particles/Color.jsx\";\nimport Custom from \"./particles/Custom.jsx\";\nimport Lines from \"./particles/Lines.jsx\";\nimport Thick from \"./particles/Thick.jsx\";\nimport Square from \"./particles/Square.jsx\";\nimport Cobweb from \"./particles/Cobweb.jsx\";\nimport Circle from \"./particles/Circle.jsx\";\nimport Tadpole from \"./particles/Tadpole.jsx\";\nimport Polygon from \"./particles/Polygon.jsx\";\nimport Fountain from \"./particles/Fountain.jsx\";\n\nexport default class ParticlesBg extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  getRandom() {\n    const { num, bg, color } = this.props;\n\n    // Code source from here, thanks author\n    // https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\n    if (!this.random) {\n      this.random = new Rand();\n      this.random.set(0.25, <Color num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Ball num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Lines num={num} bg={bg} color={color} />);\n      this.random.set(0.16, <Thick num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Circle num={num} bg={bg} color={color} />);\n      this.random.set(0.04, <Cobweb num={num} bg={bg} color={color} />);\n      this.random.set(0.1, <Polygon num={num} bg={bg} color={color} />);\n      this.random.set(0.08, <Square num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Tadpole num={num} bg={bg} color={color} />);\n      this.random.set(0.15, <Fountain num={num} bg={bg} color={color} />);\n    }\n    return this.random.getResult();\n  }\n\n  getBgParticles() {\n    const { type, num, bg, color, config } = this.props;\n\n    let particles;\n    switch (String(type).toLowerCase()) {\n      case \"color\":\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n      case \"ball\":\n        particles = <Ball num={num} bg={bg} color={color} />;\n        break;\n      case \"lines\":\n        particles = <Lines num={num} bg={bg} color={color} />;\n        break;\n      case \"thick\":\n        particles = <Thick num={num} bg={bg} color={color} />;\n        break;\n      case \"circle\":\n        particles = <Circle num={num} bg={bg} color={color} />;\n        break;\n      case \"cobweb\":\n        particles = <Cobweb num={num} bg={bg} color={color} />;\n        break;\n      case \"polygon\":\n        particles = <Polygon num={num} bg={bg} color={color} />;\n        break;\n      case \"square\":\n        particles = <Square num={num} bg={bg} color={color} />;\n        break;\n      case \"tadpole\":\n        particles = <Tadpole num={num} bg={bg} color={color} />;\n        break;\n      case \"fountain\":\n        particles = <Fountain num={num} bg={bg} color={color} />;\n        break;\n      case \"custom\":\n        particles = <Custom bg={bg} config={config} />;\n        break;\n      case \"random\":\n        particles = this.getRandom(num);\n        break;\n\n      default:\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n    }\n\n    return particles;\n  }\n\n  render() {\n    const particles = this.getBgParticles();\n    return <React.Fragment>{particles}</React.Fragment>;\n  }\n}\n"],
  "mappings": "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",
  "names": ["vendors", "x", "length", "window", "requestAnimationFrame", "cancelAnimationFrame", "callback", "fps", "aniData", "n", "param", "i", "animations", "push", "this", "start", "getIndex", "deleteMap", "stop", "index", "key", "splice", "state", "tick", "timer", "PI", "MathUtil", "num", "this", "Infinity", "a", "b", "Math", "floor", "random", "center", "f", "isInt", "randomAToB", "toString", "slice", "k", "digits", "pow", "t", "e", "i", "Span", "isArray", "Util", "getRandFromArray", "randomFloating", "c", "pan", "getValue", "initValue", "length", "tx", "ty", "angleInRadians", "cos", "s", "sin", "sx", "sy", "a00", "a01", "a02", "a10", "a11", "a12", "a20", "a21", "a22", "b00", "b01", "b02", "b10", "b11", "b12", "b20", "b21", "b22", "id", "width", "height", "position", "dom", "document", "createElement", "style", "opacity", "transform", "resize", "marginLeft", "marginTop", "div", "x", "y", "scale", "rotate", "willChange", "css3", "key", "val", "bkey", "charAt", "toUpperCase", "substr", "imgsCache", "canvasCache", "canvasId", "context", "image", "rect", "drawImage", "imagedata", "getImageData", "clearRect", "img", "callback", "param", "src", "Image", "onload", "target", "canvas", "WebGLUtil", "DomUtil", "createCanvas", "getContext", "value", "defaults", "Object", "prototype", "call", "arr", "obj", "ignore", "indexOf", "constructor", "args", "bind", "apply", "concat", "particle", "conf", "hasProp", "p", "v", "copy", "props", "prop", "hasOwnProperty", "getSpanValue", "ImgUtil", "destroy", "source", "assign", "idsMap", "Puid", "type", "uid", "getIdFromCache", "_index", "_cache", "isBody", "isInner", "Pool", "params", "__puid", "getId", "cache", "pop", "createOrClone", "getCache", "push", "total", "create", "classApply", "clone", "count", "Stats", "body", "add", "emitter", "getEmitter", "renderer", "getRenderer", "str", "proton", "emitters", "emitSpeed", "getEmitterPos", "initializes", "concatArr", "behaviours", "name", "getCreatedNumber", "getCount", "pool", "container", "innerHTML", "cssText", "join", "addEventListener", "_this", "bg", "color", "r", "parentNode", "appendChild", "emitterIndex", "renderers", "rendererIndex", "result", "cpool", "round", "EventDispatcher", "listener", "_listeners", "removeEventListener", "splice", "listeners", "handler", "dispatchEvent", "hasEventListener", "removeAllEventListeners", "Integration", "particles", "time", "damping", "eulerIntegrate", "sleep", "old", "multiplyScalar", "mass", "clear", "Proton", "render", "init", "index", "remove", "parent", "EMITTER_ADDED", "EMITTER_REMOVED", "_fps", "PROTON_UPDATE", "USE_CLOCK", "then", "Date", "getTime", "now", "elapsed", "amendChangeTabsBug", "emittersUpdate", "DEFAULT_INTERVAL", "PROTON_UPDATE_AFTER", "_interval", "update", "destroyAll", "destroyOther", "getAllParticles", "fps", "integrationType", "stats", "EULER", "integrator", "MEASURE", "RK2", "PARTICLE_CREATED", "PARTICLE_UPDATE", "PARTICLE_SLEEP", "PARTICLE_DEAD", "Rgb", "g", "PI_2", "sqrt", "ease", "easeLinear", "Vector2D", "atan2", "w", "addVectors", "subVectors", "set", "divideScalar", "distanceToSquared", "tha", "dx", "dy", "alpha", "Particle", "N180_PI", "life", "age", "dead", "sprite", "energy", "radius", "rotation", "easing", "rgb", "reset", "emptyObject", "data", "removeAllBehaviours", "applyBehaviours", "max", "applyBehaviour", "behaviour", "parents", "initialize", "addBehaviour", "emptyArray", "setProp", "h", "hex16", "substring", "parseInt", "rbg", "Number", "Polar2D", "getX", "getY", "abs", "Mat3", "mat3", "mat", "Float32Array", "mat1", "mat2", "m", "vec", "ArraySpan", "_arr", "randomColor", "toArray", "Rectangle", "right", "bottom", "Rate", "startTime", "nextTime", "timePan", "numPan", "numpan", "timepan", "setSpanValue", "Initialize", "Life", "lifePan", "Zone", "vector", "crossType", "alert", "PointZone", "error", "Position", "zone", "getPosition", "Velocity", "rpan", "thapan", "rPan", "thaPan", "vr", "polar2d", "normalizeVelocity", "PI_180", "Mass", "massPan", "Radius", "oldRadius", "Body", "imageTarget", "Behaviour", "getEasing", "force", "removeBehaviour", "Force", "fx", "fy", "normalizeForce", "calculate", "Attraction", "targetPosition", "normalizeValue", "radiusSq", "attractionForce", "lengthSq", "sub", "normalize", "RandomDrift", "driftX", "driftY", "delay", "panFoce", "addXY", "Gravity", "Collision", "collisionPool", "delta", "overlap", "totalMass", "averageMass1", "averageMass2", "distance", "newPool", "otherParticle", "n", "o", "CrossZone", "crossing", "Alpha", "same", "alphaA", "alphaB", "Scale", "scaleA", "scaleB", "Rotate", "rotationA", "rotationB", "getDirection", "influence", "Color", "createArraySpan", "colorA", "ColorUtil", "hexToRgb", "colorB", "CHANGING", "Cyclone", "angle", "span", "String", "toLowerCase", "setAngleAndForce", "cangle", "cyclone", "gradient", "getGradient", "Repulsion", "GravityWell", "centerPoint", "distanceVec", "factor", "distanceSq", "bindEmitter", "setVectorVal", "degreeTransform", "Emitter", "totalTime", "stoped", "emitTime", "isNaN", "rate", "oldStoped", "oldEmitTime", "oldTotalTime", "initAll", "rest", "initializer", "arguments", "emitting", "integrate", "dispatch", "expire", "event", "bindEvent", "createParticle", "get", "setupParticle", "addBehaviours", "stop", "removeAllInitializers", "removeEmitter", "BehaviourEmitter", "selfBehaviours", "FollowEmitter", "mousemoveHandler", "_this2", "mousemove", "mousedownHandler", "mousedown", "mouseupHandler", "mouseup", "mouseTarget", "_allowEmitting", "layerX", "layerY", "offsetX", "offsetY", "babelHelpers.get", "window", "initEventHandler", "BaseRenderer", "thinkness", "stroke", "_protonUpdateHandler", "onProtonUpdate", "_protonUpdateAfterHandler", "onProtonUpdateAfter", "_emitterAddedHandler", "onEmitterAdded", "_emitterRemovedHandler", "onEmitterRemoved", "_particleCreatedHandler", "onParticleCreated", "_particleUpdateHandler", "onParticleUpdate", "_particleDeadHandler", "onParticleDead", "element", "circleConf", "isCircle", "initHandler", "CanvasRenderer", "addImg2Body", "drawCircle", "bufContext", "buffer", "createBuffer", "globalAlpha", "globalCompositeOperation", "fillStyle", "rgbToHex", "fillRect", "save", "translate", "restore", "beginPath", "arc", "strokeStyle", "lineWidth", "closePath", "fill", "size", "bufferCache", "DomRenderer", "bodyReady", "transform3d", "backgroundColor", "removeChild", "babelHelpers.typeof", "createCircle", "createSprite", "createDiv", "borderRadius", "borderColor", "borderWidth", "url", "backgroundImage", "createBody", "EaselRenderer", "addChild", "scaleX", "scaleY", "graphics", "regX", "regY", "createjs", "Graphics", "beginStroke", "beginFill", "shape", "Shape", "PixelRenderer", "rectangle", "imageData", "createImageData", "putImageData", "setPixel", "elementwidth", "PIXIClass", "PixiRenderer", "PIXI", "Sprite", "createFromImage", "from", "fromImage", "blendMode", "setColor", "tint", "getHex16FromParticle", "anchor", "endFill", "setPIXI", "MStack", "mats", "multiply", "umat", "smat", "mstack", "gl", "viewport", "circleCanvasURL", "texturebuffers", "A", "blendEquation", "B", "blendFunc", "fs", "shader", "createShader", "FRAGMENT_SHADER", "VERTEX_SHADER", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "getShaderInfoLog", "fragmentShader", "getShader", "getFragmentShader", "vertexShader", "getVertexShader", "sprogram", "createProgram", "attachShader", "linkProgram", "getProgramParameter", "LINK_STATUS", "useProgram", "vpa", "getAttribLocation", "tca", "enableVertexAttribArray", "tMatUniform", "getUniformLocation", "samplerUniform", "useTex", "uniform1i", "idx", "unitIBuffer", "bindBuffer", "ELEMENT_ARRAY_BUFFER", "bufferData", "Uint16Array", "STATIC_DRAW", "ids", "unitI33", "stripBuffer", "raidus", "circleCanvasRadius", "toDataURL", "_w", "_h", "_width", "_height", "_scaleX", "_scaleY", "createTexture", "texture", "vcBuffer", "tcBuffer", "ARRAY_BUFFER", "bindTexture", "TEXTURE_2D", "texImage2D", "RGBA", "UNSIGNED_BYTE", "texParameteri", "TEXTURE_MAG_FILTER", "LINEAR", "TEXTURE_MIN_FILTER", "LINEAR_MIPMAP_NEAREST", "generateMipmap", "textureLoaded", "textureWidth", "textureHeight", "tmat", "imat", "oldScale", "drawImg2Canvas", "updateMatrix", "uniform3f", "uniformMatrix3fv", "top", "vertexAttribPointer", "FLOAT", "drawElements", "TRIANGLES", "UNSIGNED_SHORT", "moveOriginMatrix", "translationMatrix", "angel", "rotationMatrix", "scaleMatrix", "matrix", "inverse", "WebGLRenderer", "antialias", "stencil", "depth", "initVar", "setMaxRadius", "initShaders", "initBuffers", "FUNC_ADD", "SRC_ALPHA", "ONE_MINUS_SRC_ALPHA", "enable", "BLEND", "CustomRenderer", "LineZone", "x1", "y1", "dot", "xxyy", "tha2", "oldx", "oldy", "maxx", "minx", "maxy", "miny", "direction", "rangeOut", "getDistance", "getSymmetric", "x2", "y2", "min", "getLength", "CircleZone", "PIx2", "randomRadius", "d", "distanceTo", "RectZone", "vectors", "setVectors", "j", "length1", "length2", "getBound", "negate", "ImageZone", "func", "getStyle", "moveTo", "lineTo", "drawRect", "Vector", "Polar", "getSpan", "Init", "L", "P", "V", "M", "R", "F", "RD", "G", "S", "WebGlRenderer", "Debug", "Rand", "list", "probability", "target", "push", "calculation", "total", "i", "length", "obj", "val", "a", "b", "Math", "random", "Canvas", "props", "_iid", "_oid", "size", "width", "height", "canvasRef", "React", "createRef", "setTimeout", "initCanvas", "resize", "bind", "addEventListener", "canvas", "getCanvas", "onCanvasDidMount", "globalCompositeOperation", "context", "getContext", "setCanvasSize", "heartbeatDetectionCanvasSize", "onCanvasInited", "current", "setInterval", "newHeight", "clientHeight", "onResize", "removeEventListener", "e", "clientWidth", "start", "stop", "bg", "style", "Object", "assign", "onMouseDown", "handleMouseDown", "getStyle", "Component", "hexToRgb", "hex", "result", "exec", "parseInt", "getColor", "color", "c", "r", "g", "Ball", "renderProton", "createProton", "createMiniEmitter", "add", "remove", "proton", "destroy", "Proton", "emitter", "Emitter", "rate", "Rate", "num", "Span", "addInitialize", "Mass", "Radius", "Life", "Velocity", "addBehaviour", "Alpha", "Color", "Scale", "Gravity", "Collision", "customDeadBehaviour", "CrossZone", "RectZone", "p", "x", "min", "max", "y", "emit", "addEmitter", "renderer", "CanvasRenderer", "onProtonUpdate", "fillStyle", "fillRect", "addRenderer", "particle", "radius", "miniEmitteing", "dead", "miniEmitter", "radiusInitialize", "V", "colorBehaviour", "reset", "update", "colors", "Position", "Infinity", "easeOutCubic", "crossZoneBehaviour", "zone", "renderers", "key", "defaultVal", "config", "Array", "isArray", "getProp", "rps", "mass", "life", "body", "position", "v", "tha", "alpha", "getArrProp", "scale", "cross", "rotate", "f", "emitterV", "FollowEmitter", "Body", "pos", "alphaB", "scaleB", "colorB", "Rotate", "RandomDrift", "G", "F", "createRenderer", "onUpdate", "onParticleCreated", "onParticleUpdate", "operation", "Lines", "backgroundColor", "damping", "mouseObj", "attractionBehaviour", "Attraction", "beginPath", "strokeStyle", "lineWidth", "moveTo", "old", "lineTo", "closePath", "stroke", "Thick", "hue", "index", "colorTemplate", "CircleZone", "repulsion", "Repulsion", "attraction", "data", "begin", "MathUtil", "randomAToB", "PI", "replace", "ratio", "cos", "arc", "fill", "targetPosition", "Square", "dis", "LineZone", "getSpan", "preEmit", "CustomRenderer", "clearRect", "w", "h", "save", "globalAlpha", "translate", "degreeTransform", "rotation", "rect", "restore", "Cobweb", "pointZone", "R", "onProtonUpdateAfter", "particles", "j", "pA", "pB", "distanceTo", "Circle", "Tadpole", "mouseInfo", "jointCount", "delayTime", "points", "fillPointsData", "unshift", "pop", "drawTadpoleHead", "drawTadpoleTail", "l", "linearEvaluation", "A", "B", "X", "COLOR", "Polygon", "createEmitter", "count", "onParticleDead", "drawPolygon", "sin", "mainEmitter", "once", "gravity", "pool", "get", "completed", "radiusInit", "expire", "removeEmitter", "oldRadius", "emitterCount", "Fountain", "createCustomBehaviour", "Vector2D", "gradient", "getGradient", "ParticlesBg", "set", "getResult", "type", "String", "toLowerCase", "Custom", "getRandom", "getBgParticles"]
}
